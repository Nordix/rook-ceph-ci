---
- name: Deploy Rook-Ceph Cluster and Verify Readiness
  hosts: kube_control_plane1
  gather_facts: true

  vars:
    rook_ceph_namespace: rook-ceph
    crds_manifest: /tmp/release-1.17/crds.yaml
    common_manifest: /tmp/release-1.17/common.yaml
    operator_manifest: /tmp/release-1.17/operator.yaml
    cluster_manifest: /tmp/release-1.17/cluster.yaml
    ceph_tools_pod_label: app=rook-ceph-tools
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Ensure pip3 is installed (CentOS Stream 9)
      ansible.builtin.dnf:
        name: python3-pip
        state: present
        disablerepo: kubernetes
      become: true
      when: ansible_os_family == "RedHat"

    - name: Ensure pip3 is installed (Ubuntu)
      ansible.builtin.apt:
        name: python3-pip
        state: present
      become: true
      when: ansible_os_family == "Debian"

    - name: Install kubernetes Python module
      ansible.builtin.pip:
        name: kubernetes
        executable: pip3
      become: true
      when: ansible_os_family == "RedHat"

    - name: Install kubernetes Python module via apt
      ansible.builtin.apt:
        name: python3-kubernetes
        state: present
      become: true
      when: ansible_os_family == "Debian"

    - name: Get Control Plane Node Name
      shell: kubectl get nodes -o json
      register: nodes_output

    - name: Get all Kubernetes node names
      ansible.builtin.set_fact:
        all_node_names: >-
          {{ nodes_output.stdout | from_json | json_query("items[*].metadata.name") }}
      ignore_errors: true

    - name: Debug - Show all node names identified
      ansible.builtin.debug:
        var: all_node_names

    - name: Attempt to remove node-role.kubernetes.io/control-plane:NoSchedule taint from all nodes
      ansible.builtin.command: >
        kubectl taint node {{ item }} node-role.kubernetes.io/control-plane:NoSchedule-
      loop: "{{ all_node_names }}"
      when: all_node_names is defined and all_node_names | length > 0
      ignore_errors: true

    - name: Copy rook test files to control plane
      copy:
        src: "release-1.17/"
        dest: "/tmp/release-1.17/"

    - name: Apply Rook-Ceph CRDs, Common, and Operator manifests
      kubernetes.core.k8s:
        state: present
        src: "{{ item }}"
        namespace: "{{ rook_ceph_namespace }}"
      loop:
        - "{{ crds_manifest }}"
        - "{{ common_manifest }}"
        - "{{ operator_manifest }}"
      register: apply_operator_result
      until: apply_operator_result is not failed
      retries: 5
      delay: 5
      tags: deploy_operator

    - name: Wait for Rook-Ceph Operator deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: rook-ceph-operator
        namespace: "{{ rook_ceph_namespace }}"
      register: operator_deployment_info
      until:
        - operator_deployment_info.resources | length > 0
        - operator_deployment_info.resources[0].status.readyReplicas is defined
        - operator_deployment_info.resources[0].status.readyReplicas == operator_deployment_info.resources[0].spec.replicas
      retries: 30
      delay: 10
      tags: wait_operator_ready

    - name: Apply Rook-Ceph Cluster manifest
      kubernetes.core.k8s:
        state: present
        src: "{{ cluster_manifest }}"
        namespace: "{{ rook_ceph_namespace }}"
      register: apply_cluster_result
      until: apply_cluster_result is not failed
      retries: 5
      delay: 10
      tags: deploy_cluster

    - name: Wait for Ceph Manager (MGR) pods to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ rook_ceph_namespace }}"
        label_selectors:
          - app=rook-ceph-mgr
      register: mgr_pods
      until:
        - mgr_pods.resources | length >= 2
        - mgr_pods.resources | selectattr('status.containerStatuses', 'defined') | map(attribute='status.containerStatuses') | flatten | selectattr('ready', 'equalto', true) | list | length == mgr_pods.resources | map(attribute='spec.containers') | flatten | list | length # All containers in all MGR pods are ready
      retries: 60
      delay: 10
      tags: wait_mgr_ready

    - name: Wait for Ceph Monitor (MON) pods to be ready (at least 3)
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ rook_ceph_namespace }}"
        label_selectors:
          - app=rook-ceph-mon
      register: mon_pods
      until:
        - mon_pods.resources | length >= 3
        - mon_pods.resources | selectattr('status.containerStatuses', 'defined') | map(attribute='status.containerStatuses') | flatten | selectattr('ready', 'equalto', true) | list | length == mon_pods.resources | map(attribute='spec.containers') | flatten | list | length # All containers in all MON pods are ready
      retries: 60
      delay: 10
      tags: wait_mon_ready

    - name: Wait for Ceph OSD pods to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ rook_ceph_namespace }}"
        label_selectors:
          - app=rook-ceph-osd
      register: osd_pods
      until:
        - osd_pods.resources | length >= 3
        - osd_pods.resources | selectattr('status.containerStatuses', 'defined') | map(attribute='status.containerStatuses') | flatten | selectattr('ready', 'equalto', true) | list | length == osd_pods.resources | map(attribute='spec.containers') | flatten | list | length # All containers in all OSD pods are ready
      retries: 60
      delay: 10
      tags: wait_osd_ready

    - name: Deploy Rook toolbox pod
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/rook/rook/refs/heads/release-1.17/deploy/examples/toolbox.yaml

    - name: Get rook-ceph-tools pod name
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ rook_ceph_namespace }}"
        label_selectors:
          - "{{ ceph_tools_pod_label }}"
      register: ceph_tools_pod_info
      until:
        - ceph_tools_pod_info.resources | length > 0
        - ceph_tools_pod_info.resources[0].status.phase == 'Running'
      retries: 20
      delay: 10
      tags: get_tools_pod

    - name: Set fact for ceph tools pod name
      set_fact:
        ceph_tools_pod_name: "{{ ceph_tools_pod_info.resources[0].metadata.name }}"
      tags: set_fact

    - name: Check Ceph Cluster Health
      command: >
        kubectl -n {{ rook_ceph_namespace }} exec -it {{ ceph_tools_pod_name }} -- ceph status --format=json
      register: ceph_status_output
      until:
        - ceph_status_output.rc == 0
        - (ceph_status_output.stdout | from_json).health.status == "HEALTH_OK" or
          (ceph_status_output.stdout | from_json).health.status == "HEALTH_WARN"
      retries: 30
      delay: 10
      tags: check_ceph_health

    - name: Display Ceph Cluster Health
      debug:
        msg: "Ceph Cluster Health: {{ (ceph_status_output.stdout | from_json).health.status }}"
      tags: display_health

    - name: Report OSD Status from Ceph
      command: >
        kubectl -n {{ rook_ceph_namespace }} exec -it {{ ceph_tools_pod_name }} -- ceph osd tree --format=json
      register: ceph_osd_tree
      tags: report_osd_status

    - name: Display OSD Status
      debug:
        msg: "Ceph OSD Tree: {{ ceph_osd_tree.stdout }}"
      tags: display_osd_status

    - name: Final Health Check - Fail if HEALTH_ERR
      fail:
        msg: "Ceph Cluster is in HEALTH_ERR state. Please investigate!"
      when: (ceph_status_output.stdout | from_json).health.status == "HEALTH_ERR"
      tags: final_check
